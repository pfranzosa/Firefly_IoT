button <- hardware.pin1; //assigns the variable button to pin1 on the electric imp
led <- hardware.pin2; //assigns the variable led to pin2 on the electric imp
arduino <- hardware.uart57; // Used to talk with Arduino
c <-[0,1,2]; 
info <-0; 
button_presses <- 0;
Press <- 0; 
diff <- 0; 
timestamp <- "";
timeUsed <-"";
3.

//senses when the button is pressed/released and 
function buttonPress() 
{
    local state = button.read(); 
    if (state == 1) {
        //server.log("release");
        if((button_presses%2)==1)
        {
            agent.send("storeTime",hardware.millis());
           //server.log(timeUsed);
        }
        GatherData();
    }
    else{ /*server.log("press");  /* when the button is released*/ }
}

//Sets button as a Digital input and the function that is executed when the state changes
button.configure(DIGITAL_IN_PULLDOWN, buttonPress); 
led.configure(DIGITAL_OUT); 

function GatherData() 
{
    local data="";
    if((button_presses%2)==0)
    {
        Press = hardware.millis(); 
        data ="Temperture at beginning of treatment: "+(((c[0]*9)/5)+32)+" F\r\n    " + /*Atmospheric Pressure at beginning of treatment: "+c[1]+" hPa \r\n      */ "The Altitude at startup at beginning of treatment: "+c[2]+"m";
    }
    else
    {
        local temp = hardware.millis(); 
        differance(temp,Press); //local diff =temp-Press;
        data ="A child was treated for  "+timestamp+" using Firefly. \r\n    Firefly has been used for "+ timeUsed + ".\r\n    Temperture at end of treatment: "+(((c[0]*9)/5)+32)+" F\r\n    "+/*Atmospheric Pressure at end of treatment: "+c[1]+" hPa\r\n       */"The Altitude at end of treatment: "+c[2]+"m";
        //data ="It has been "+ diff +" "+timestamp+" since the last time Firefly treated a child. \r\n    " +"Temperture at end of treatment: "+(((c[0]*9)/5)+32)+" F\r\n    Atmospheric Pressure at end of treatment: "+c[1]+" hPa\r\n       The Altitude at end of treatment: "+c[2]+"m";
        Press=temp;
        timestamp="";
    }
    server.log(data);
    //SendEmail(data);
    button_presses++;
} 

function differance(start,end)
{
    local time =start-end;
    if(60>(time/(1000))&&(time/(1000))>=1)
    {
        time = ((time/1000)+ 4);
        timestamp = time+" Second(s)";
    }
    else if(60>(time/(60000))&&(time/(60000))>=1)
    {
        time = time/(1000);
        timestamp = time/60 + " Minute(s) " + ((time%60)+ 4)  + " Second(s)";
    }
    else if(24>(time/(3600000))&&(time/(3600000))>=1)
    {
        time = time/(1000);
        timestamp = time/3600 + " Hour(s) " + ((time/60)%60) + " Minute(s) "; //timestamp = "Hour";
    }
    //server.log(timestamp);
}

// sends the email indicator to the agent to execute the SendEmail function
function SendEmail(info) { agent.send("email",info); } 

//The code below is used to keep the imp active and responsive until the button is pressed. 

// when we get a "pong" message from the agent
agent.on("pong", function(startMillis)
{
    local endMillis = hardware.millis();    // get the current time
    local diff = endMillis - startMillis;   // calculate how long the round trip took
    server.log("Round trip took: " + diff + "ms");
    led.write(0);
    imp.wakeup(45.0, ping);                 // wakeup in 45 seconds and ping again
}
);

// when we get a "pong" message from the agent
agent.on("usageTime", function(uTime)
{
    local  temp =uTime-Press;
    //local temp=uTime;
   if(60>(temp/(1000))&&(temp/(1000))>=1)
    {
        temp = ((temp/1000));
        timeUsed = temp+" Second(s)";
    }
    else if(60>(temp/(60000))&&(temp/(60000))>=1)
    {
        temp = temp/(1000);
        timeUsed = temp/60 + " Minute(s) " +((temp%60) + 4) + " Second(s)";
    }
    else if(24>(temp/(3600000))&&(temp/(3600000))>=1)
    {
        temp = temp/(1000);
        timeUsed = temp/3600 + " Hour(s) " + ((temp/60)%60) + " Minute(s) "+((temp%60) + 4) + " Second(s)"; //timestamp = "Hour";
    }
    //server.log(timeUsed);
});
 
// send a ping message with the current millis counter
function ping() 
{ 
    ReportRSSI();
    agent.send("ping", hardware.millis());
    led.write(1); 
}

function ReportRSSI() 
{
    local rssi = imp.rssi();
    if (rssi < -87) { server.log("Signal Strength: " + rssi + "dBm (0 bars)"); }
    else if (rssi < -82) { server.log("Signal Strength: " + rssi + "dBm (1 bar)"); }
    else if (rssi < -77) { server.log("Signal Strength: " + rssi + "dBm (2 bars)"); }
    else if (rssi < -72) { server.log("Signal Strength: " + rssi + "dBm (3 bars)"); }
    else if (rssi < -67) { server.log("Signal Strength: " + rssi + "dBm (4 bars)"); }
    else{ server.log("Signal Strength: " + rssi + "dBm (5 bars)"); }
}
 
// start the ping-pong
ping();

//Used to get information from the arduino and send it to the Imp
function arduinoData() 
{
    local read =arduino.read();
    // server.log("From serial:" + read+"    "+info);
    // if sending over an odd array of bytes info!=x and if(info<x)
    // if sending over an even array of bytes info!=x+1 and if(info<x)
    // where x is the size of the array
    if(read!=(-1)&&info!=3)
    {
        if(info<3)
        {
            c[info]=read;
            //server.log(c[info]+"     info="+info);
            info++;
        }
        else{info++;}
    } else{ info=0; }
}

arduino.configure(9600, 8, PARITY_NONE, 1, NO_CTSRTS, arduinoData);